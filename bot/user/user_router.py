import json

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

import bot.strings as s
from bot.dao.dao import UserDao, OrderDao, ProductDao
from bot.user.kbs import main_user_kb
from bot.user.schemas import UserIdModel, UserModel, OrderUserIdModel

user_router = Router()

# /start
@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username
    firstname = message.from_user.first_name
    logger.info(f"user_id: {user_id}, username: @{username}")

    user = await UserDao.find_one_or_none(
        session=session_with_commit,
        filters=UserIdModel(id=user_id)
    )

    if user:
        if username:
            logger.debug(username)
            if user.username != '@'+username:
                await UserDao.update(
                    session=session_with_commit,
                    filters=UserIdModel(id=user.id),
                    values=UserModel(id=user.id, username='@'+username)
                )
        
    elif username: 
        await UserDao.add(
                session=session_with_commit,
                values=UserModel(
                    id=user_id,
                    username='@'+username
                )
            )
    else: 
        await UserDao.add(
                session=session_with_commit,
                values=UserModel(
                    id=user_id,
                    username='@'+"None"
                )
            )
    # user_info = await UserDAO.find_one_or_none(
    #     session=session_with_commit,
    #     filters=TelegramIDModel(telegram_id=user_id)
    # )

    # if user_info:
    #     return await message.answer(
    #         f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    #         reply_markup=main_user_kb(user_id)
    #     )

    # values = UserModel(
    #     telegram_id=user_id,
    #     username=message.from_user.username,
    #     first_name=message.from_user.first_name,
    #     last_name=message.from_user.last_name,
    # )
    # await UserDAO.add(session=session_with_commit, values=values)
    if username:
        await message.answer(f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å @{username}</b>.",
                            reply_markup=main_user_kb(user_id))
    else:
        await message.answer(text=f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {firstname}</b>.\n –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>Telegramm Username</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä @Username) –∏–Ω–∞—á–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.",
                            reply_markup=main_user_kb(user_id))
    
@user_router.callback_query(F.data == "home")
async def page_home(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return await call.message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=main_user_kb(call.from_user.id)
    )

@user_router.callback_query(F.data == "about")
async def page_about(call: CallbackQuery):
    await call.answer("–û –º–∞–≥–∞–∑–∏–Ω–µ")
    await call.message.answer(
        text=(
            s.about_text
        ),
        reply_markup=call.message.reply_markup
    )


@user_router.callback_query(F.data =="my_orders")
async def page_my_orders(call: CallbackQuery, session_without_commit: AsyncSession):
    
    orders = await OrderDao.find_all(
        session=session_without_commit,
        filters=OrderUserIdModel(user_id=call.from_user.id)
    )
    products = await ProductDao.find_all(session=session_without_commit)
    

    if orders:
        await call.message.delete()
        for order in orders:
            for product in products:
                if int(product.id)==int(order.product_id):
                    media = []
                    for photo in json.loads(product.photos): 
                        media.append(InputMediaPhoto(media=photo))
                # product = await ProductDao.find_one_or_none(
                #     session=session_without_commit,
                #     filters=ProductIDModel(id=order.product_id)
                # )
                
                    text = (
                        f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product.name}\n\n"
                        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price} —Ä—É–±.\n\n"
                        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n\n"
                        f"üìù <b>–†–∞–∑–º–µ—Ä\–¶–≤–µ—Ç:</b>\n<i>{order.product_size}</i>\n\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                        f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:</b>\n<i>{ s.confirmed if order.confirmed else s.not_confirmed}</i>\n\n"
                    )
                    await call.message.answer_media_group(media= media)
                    await call.message.answer(
                        text=text 
                        )
        await call.message.answer(
            text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã –≤—ã—à–µ",
            reply_markup=call.message.reply_markup
        )
    else:
        await call.answer(
            text= "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
            )
        return

# @user_router.callback_query(F.data == "my_profile")
# async def page_about(call: CallbackQuery, session_without_commit: AsyncSession):
#     await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")

#     # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     purchases = await UserDAO.get_purchase_statistics(session=session_without_commit, telegram_id=call.from_user.id)
#     total_amount = purchases.get("total_amount", 0)
#     total_purchases = purchases.get("total_purchases", 0)

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
#     if total_purchases == 0:
#         await call.message.answer(
#             text="üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
#                  "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
#             reply_markup=main_user_kb(call.from_user.id)
#         )
#     else:
#         text = (
#             f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
#             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <b>{total_purchases}</b>\n"
#             f"–û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount}‚ÇΩ</b>\n\n"
#             "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫?"
#         )
#         await call.message.answer(
#             text=text,
#             reply_markup=purchases_kb()
#         )

# @user_router.callback_query(F.data == "purchases")
# async def page_user_purchases(call: CallbackQuery, session_without_commit: AsyncSession):
#     await call.answer("–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")

#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     purchases = await UserDAO.get_purchased_products(session=session_without_commit, telegram_id=call.from_user.id)

#     if not purchases:
#         await call.message.edit_text(
#             text=f"üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.</b>\n\n"
#                  f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!",
#             reply_markup=main_user_kb(call.from_user.id)
#         )
#         return

    # # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    # for purchase in purchases:
    #     product = purchase.product
    #     file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if product.file_id else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"

    #     product_text = (
    #         f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
    #         f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #         f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{product.name}</i>\n"
    #         f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.description}</i>\n"
    #         f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n"
    #         f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{product.hidden_content}</i>\n"
    #         f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    #         f"{file_text}\n"
    #     )

    #     if product.file_id:
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º
    #         await call.message.answer_document(
    #             document=product.file_id,
    #             caption=product_text,
    #         )
    #     else:
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    #         await call.message.answer(
    #             text=product_text,
    #         )

    # await call.message.answer(
    #     text="üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
    #     reply_markup=main_user_kb(call.from_user.id)
    # )